#!/usr/bin/env ruby

# autocompile
#
# Recompiles and boots a given crystal file one any .cr file change.
#
# Example:
# bin/autocompile examples/restful/restful.cr

require "open3"
begin
  require "rb-fsevent"
  require "listen"
rescue LoadError
  puts "Error: You need to gem install rb-fsevent and listen for autocompile to work"
  exit 1
end

begin
  require "terminal-notifier-guard"
  @notify = true
rescue LoadError
  puts "Install terminal-notifier-guard to get notified of compilation status"
end

def notify(message, type: "success")
  if @notify
    TerminalNotifier::Guard.send(type, message)
  end
end

@app_path = ARGV.first # ie. examples/something.cx
@app_pid = nil

def spawn_crystal
  target = "tmp/compiled"
  build_command = "crystal build -o #{target} #{@app_path}"

  loop do
    start_time = Time.now
    puts "\nCompiling #{@app_path}"
    build_success = system(build_command)

    if build_success
      elapsed = Time.now - start_time
      puts "Compiled in #{elapsed.round(2)}sec\n\n"
      notify "Recompiled!"

      Open3.popen3(target) do |stdin, stdout, stderr, thread|
        @app_pid = thread[:pid]
        stdout.each do |line|
          puts line
        end
      end
    else
      puts "Build failed, press any key to try again..."
      notify "Compile failed!", type: "failed"
      $stdin.readline
    end
  end
end

dirs = ["./examples", "./src"]

listener = Listen.to(*dirs) do |modified, added, removed|
  if @app_pid
    Process.kill("QUIT", @app_pid)
    @app_pid = nil
  end
end

listener.only /\.(cr|ecr)/
listener.start

spawn_crystal
